<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>施工中</title>
  
  <subtitle>记录生活</subtitle>
  <link href="http://www.zhengtianyu.com/atom.xml" rel="self"/>
  
  <link href="http://www.zhengtianyu.com/"/>
  <updated>2021-10-09T03:27:43.752Z</updated>
  <id>http://www.zhengtianyu.com/</id>
  
  <author>
    <name>DDDivano</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>pyautogui鼠标操作</title>
    <link href="http://www.zhengtianyu.com/2021/10/09/pyautogui%E9%BC%A0%E6%A0%87%E6%93%8D%E4%BD%9C/"/>
    <id>http://www.zhengtianyu.com/2021/10/09/pyautogui%E9%BC%A0%E6%A0%87%E6%93%8D%E4%BD%9C/</id>
    <published>2021-10-09T02:27:03.000Z</published>
    <updated>2021-10-09T03:27:43.752Z</updated>
    
    <content type="html"><![CDATA[<h1 id="鼠标控制功能"><a href="#鼠标控制功能" class="headerlink" title="鼠标控制功能"></a>鼠标控制功能</h1><blockquote><p>PyAutoGUI lets your Python scripts control the mouse and keyboard to automate interactions with other applications. The API is designed to be simple. PyAutoGUI works on Windows, macOS, and Linux, and runs on Python 2 and 3.</p></blockquote><span id="more"></span><h2 id="屏幕和鼠标尺寸位置"><a href="#屏幕和鼠标尺寸位置" class="headerlink" title="屏幕和鼠标尺寸位置"></a>屏幕和鼠标尺寸位置</h2><p>屏幕上的位置是通过X,Y坐标来确定的。和传统数学坐标系不同，X从左往右依次增大，Y从上往下依次增大。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">0,0       X increases --&gt;</span><br><span class="line">+---------------------------+</span><br><span class="line">|                           | Y increases</span><br><span class="line">|                           |     |</span><br><span class="line">|   1920 x 1080 screen      |     |</span><br><span class="line">|                           |     V</span><br><span class="line">|                           |</span><br><span class="line">|                           |</span><br><span class="line">+---------------------------+ 1919, 1079</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>最左上角的屏幕像素被标记为（0，0）。如果你的屏幕是1920 * 1080， 那么右下角的像素会被标记为（1919，1079），因为像素是从0开始算不是1。<br>屏幕分辨率大小由函数<code>size()</code>返回，鼠标的位置由函数<code>position()</code>返回 </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; pyautogui.size()</span><br><span class="line">(1920, 1080)</span><br><span class="line">&gt;&gt;&gt; pyautogui.position()</span><br><span class="line">(187, 567)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>下面是一个py3小程序，它将不断的打印光标的位置</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">#! python3</span><br><span class="line">import pyautogui, sys</span><br><span class="line">print(&#x27;Press Ctrl-C to quit.&#x27;)</span><br><span class="line">try:</span><br><span class="line">    while True:</span><br><span class="line">        x, y = pyautogui.position()</span><br><span class="line">        positionStr = &#x27;X: &#x27; + str(x).rjust(4) + &#x27; Y: &#x27; + str(y).rjust(4)</span><br><span class="line">        print(positionStr, end=&#x27;&#x27;)</span><br><span class="line">        print(&#x27;\b&#x27; * len(positionStr), end=&#x27;&#x27;, flush=True)</span><br><span class="line">except KeyboardInterrupt:</span><br><span class="line">    print(&#x27;\n&#x27;)</span><br></pre></td></tr></table></figure><p>为了检测某个X，Y坐标是不是在屏幕范围内，可以通过list or tuple传入<code>onScreen()</code>函数来判断，如果在屏幕上，返回True，否则，返回False。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; pyautogui.onScreen(0, 0)</span><br><span class="line">True</span><br><span class="line">&gt;&gt;&gt; pyautogui.onScreen(0, -1)</span><br><span class="line">False</span><br><span class="line">&gt;&gt;&gt; pyautogui.onScreen(0, 99999999)</span><br><span class="line">False</span><br><span class="line">&gt;&gt;&gt; pyautogui.size()</span><br><span class="line">(1920, 1080)</span><br><span class="line">&gt;&gt;&gt; pyautogui.onScreen(1920, 1080)</span><br><span class="line">False</span><br><span class="line">&gt;&gt;&gt; pyautogui.onScreen(1919, 1079)</span><br><span class="line">True</span><br></pre></td></tr></table></figure><h2 id="鼠标移动功能"><a href="#鼠标移动功能" class="headerlink" title="鼠标移动功能"></a>鼠标移动功能</h2><p><code>moveTo()</code>函数用来将鼠标指针移动到指定的(X,Y)坐标。None可以作为参数传入表示当前鼠标的对应位置坐标不变。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; pyautogui.moveTo(100, 200)   # moves mouse to X of 100, Y of 200.</span><br><span class="line">&gt;&gt;&gt; pyautogui.moveTo(None, 500)  # moves mouse to X of 100, Y of 500.</span><br><span class="line">&gt;&gt;&gt; pyautogui.moveTo(600, None)  # moves mouse to X of 600, Y of 500.</span><br></pre></td></tr></table></figure><p>通常鼠标会立即移动到指定的位置，如果你想让它逐渐的移动到某一个位置，可以传入第三个参数。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; pyautogui.moveTo(100, 200, 2)   # moves mouse to X of 100, Y of 200 over 2 seconds</span><br></pre></td></tr></table></figure><p>(If the duration is less than pyautogui.MINIMUM_DURATION the movement will be instant. By default, pyautogui.MINIMUM_DURATION is 0.1.)<br>上面意思是如果你设置小于 或值，嗯，那他就不生效</p><p>如果你想移动相对位置，可以使用<code>move()</code>函数</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; pyautogui.moveTo(100, 200)  # moves mouse to X of 100, Y of 200.</span><br><span class="line">&gt;&gt;&gt; pyautogui.move(0, 50)       # move the mouse down 50 pixels.</span><br><span class="line">&gt;&gt;&gt; pyautogui.move(-30, 0)      # move the mouse left 30 pixels.</span><br><span class="line">&gt;&gt;&gt; pyautogui.move(-30, None)   # move the mouse left 30 pixels.</span><br></pre></td></tr></table></figure><h2 id="鼠标拖拽功能"><a href="#鼠标拖拽功能" class="headerlink" title="鼠标拖拽功能"></a>鼠标拖拽功能</h2><p>鼠标拖拽和鼠标移动类似，无非就是加了一个按键参数，通过哪个按键拖拽<code>left,middle,right</code>。通过<code>dragTo(), drag()</code>完成操作。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; pyautogui.dragTo(100, 200, button=&#x27;left&#x27;)     # drag mouse to X of 100, Y of 200 while holding down left mouse button</span><br><span class="line">&gt;&gt;&gt; pyautogui.dragTo(300, 400, 2, button=&#x27;left&#x27;)  # drag mouse to X of 300, Y of 400 over 2 seconds while holding down left mouse button</span><br><span class="line">&gt;&gt;&gt; pyautogui.drag(30, 0, 2, button=&#x27;right&#x27;)   # drag the mouse left 30 pixels over 2 seconds while holding down the right mouse button</span><br></pre></td></tr></table></figure><h2 id="Tween-Easing-Functions"><a href="#Tween-Easing-Functions" class="headerlink" title="Tween / Easing Functions"></a>Tween / Easing Functions</h2><p>这段懒得翻译因为的确没啥大用<br>Tweening is an extra feature to make the mouse movements fancy. You can probably skip this section if you don’t care about this.</p><p>A tween or easing function dictates the progress of the mouse as it moves to its destination. Normally when moving the mouse over a duration of time, the mouse moves directly towards the destination in a straight line at a constant speed. This is known as a linear tween or linear easing function.</p><p>PyAutoGUI has other tweening functions available in the pyautogui module. The pyautogui.easeInQuad function can be passed for the 4th argument to moveTo(), move(), dragTo(), and drag() functions to have the mouse cursor start off moving slowly and then speeding up towards the destination. The total duration is still the same as the argument passed to the function. The pyautogui.easeOutQuad is the reverse: the mouse cursor starts moving fast but slows down as it approaches the destination. The pyautogui.easeOutElastic will overshoot the destination and “rubber band” back and forth until it settles at the destination.</p><p>For example:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; pyautogui.moveTo(100, 100, 2, pyautogui.easeInQuad)     # start slow, end fast</span><br><span class="line">&gt;&gt;&gt; pyautogui.moveTo(100, 100, 2, pyautogui.easeOutQuad)    # start fast, end slow</span><br><span class="line">&gt;&gt;&gt; pyautogui.moveTo(100, 100, 2, pyautogui.easeInOutQuad)  # start and end fast, slow in middle</span><br><span class="line">&gt;&gt;&gt; pyautogui.moveTo(100, 100, 2, pyautogui.easeInBounce)   # bounce at the end</span><br><span class="line">&gt;&gt;&gt; pyautogui.moveTo(100, 100, 2, pyautogui.easeInElastic)  # rubber band at the end</span><br></pre></td></tr></table></figure><p>These tweening functions are copied from Al Sweigart’s PyTweening module: <a href="https://pypi.python.org/pypi/PyTweening">https://pypi.python.org/pypi/PyTweening</a> <a href="https://github.com/asweigart/pytweening">https://github.com/asweigart/pytweening</a> This module does not have to be installed to use the tweening functions.</p><p>If you want to create your own tweening function, define a function that takes a single float argument between 0.0 (representing the start of the mouse travelling) and 1.0 (representing the end of the mouse travelling) and returns a float value between 0.0 and 1.0.</p><h2 id="鼠标点击操作"><a href="#鼠标点击操作" class="headerlink" title="鼠标点击操作"></a>鼠标点击操作</h2><p><code>click()</code>函数模拟一次在当前位置鼠标左键的点击操作。点击操作的定义是按下鼠标按键然后抬起。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; pyautogui.click()  # click the mouse</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>结合了<code>moveTo()</code>功能，可以传入点击的坐标。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; pyautogui.click(x=100, y=200)  # move to 100, 200, then click the left mouse button.</span><br></pre></td></tr></table></figure><p>可以指定用哪个按键点击<code>left,middle,right</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; pyautogui.click(button=&#x27;right&#x27;)  # right-click the mouse</span><br></pre></td></tr></table></figure><p>为了做多次点击操作，可以传入<code>clicks</code>参数，并且，你可以通过<code>interval</code>参数来设定每次点击之间的间隔时间。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; pyautogui.click(clicks=2)  # double-click the left mouse button</span><br><span class="line">&gt;&gt;&gt; pyautogui.click(clicks=2, interval=0.25)  # double-click the left mouse button, but with a quarter second pause in between clicks</span><br><span class="line">&gt;&gt;&gt; pyautogui.click(button=&#x27;right&#x27;, clicks=3, interval=0.25)  ## triple-click the right mouse button with a quarter second pause in between clicks</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>As a convenient shortcut, the <code>doubleClick()</code> function will perform a double click of the left mouse button. It also has the optional x, y, interval, and button keyword arguments. For example:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; pyautogui.doubleClick()  # perform a left-button double click</span><br></pre></td></tr></table></figure><p>There is also a <code>tripleClick()</code> function with similar optional keyword arguments.</p><p>The <code>rightClick()</code> function has optional <code>x</code> and <code>y</code> keyword arguments.</p><h2 id="鼠标按下和抬起功能"><a href="#鼠标按下和抬起功能" class="headerlink" title="鼠标按下和抬起功能"></a>鼠标按下和抬起功能</h2><p>可以通过<code>mouseDown()</code> <code>mouseUp()</code>来定义鼠标按下和抬起操作，实现拖拽功能</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; pyautogui.mouseDown(); pyautogui.mouseUp()  # does the same thing as a left-button mouse click</span><br><span class="line">&gt;&gt;&gt; pyautogui.mouseDown(button=&#x27;right&#x27;)  # press the right button down</span><br><span class="line">&gt;&gt;&gt; pyautogui.mouseUp(button=&#x27;right&#x27;, x=100, y=200)  # move the mouse to 100, 200, then release the right button up.</span><br></pre></td></tr></table></figure><h2 id="鼠标滚动"><a href="#鼠标滚动" class="headerlink" title="鼠标滚动"></a>鼠标滚动</h2><p>The mouse scroll wheel can be simulated by calling the scroll() function and passing an integer number of “clicks” to scroll. The amount of scrolling in a “click” varies between platforms. Optionally, integers can be passed for the the x and y keyword arguments to move the mouse cursor before performing the scroll. For example:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; pyautogui.scroll(10)   # scroll up 10 &quot;clicks&quot;</span><br><span class="line">&gt;&gt;&gt; pyautogui.scroll(-10)  # scroll down 10 &quot;clicks&quot;</span><br><span class="line">&gt;&gt;&gt; pyautogui.scroll(10, x=100, y=100)  # move mouse cursor to 100, 200, then scroll up 10 &quot;clicks&quot;</span><br></pre></td></tr></table></figure><p>On OS X and Linux platforms, PyAutoGUI can also perform horizontal scrolling by calling the hscroll() function. For example:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; pyautogui.hscroll(10)   # scroll right 10 &quot;clicks&quot;</span><br><span class="line">&gt;&gt;&gt; pyautogui.hscroll(-10)   # scroll left 10 &quot;clicks&quot;</span><br></pre></td></tr></table></figure><p>The scroll() function is a wrapper for vscroll(), which performs vertical scrolling.</p>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;鼠标控制功能&quot;&gt;&lt;a href=&quot;#鼠标控制功能&quot; class=&quot;headerlink&quot; title=&quot;鼠标控制功能&quot;&gt;&lt;/a&gt;鼠标控制功能&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;PyAutoGUI lets your Python scripts control the mouse and keyboard to automate interactions with other applications. The API is designed to be simple. PyAutoGUI works on Windows, macOS, and Linux, and runs on Python 2 and 3.&lt;/p&gt;
&lt;/blockquote&gt;</summary>
    
    
    
    <category term="编程技术" scheme="http://www.zhengtianyu.com/categories/%E7%BC%96%E7%A8%8B%E6%8A%80%E6%9C%AF/"/>
    
    <category term="python" scheme="http://www.zhengtianyu.com/categories/%E7%BC%96%E7%A8%8B%E6%8A%80%E6%9C%AF/python/"/>
    
    
    <category term="界面辅助" scheme="http://www.zhengtianyu.com/tags/%E7%95%8C%E9%9D%A2%E8%BE%85%E5%8A%A9/"/>
    
    <category term="自动化" scheme="http://www.zhengtianyu.com/tags/%E8%87%AA%E5%8A%A8%E5%8C%96/"/>
    
    <category term="pyautogui" scheme="http://www.zhengtianyu.com/tags/pyautogui/"/>
    
  </entry>
  
  <entry>
    <title>pyautogui截屏操作</title>
    <link href="http://www.zhengtianyu.com/2021/09/28/pyautogui%E6%88%AA%E5%B1%8F%E6%93%8D%E4%BD%9C/"/>
    <id>http://www.zhengtianyu.com/2021/09/28/pyautogui%E6%88%AA%E5%B1%8F%E6%93%8D%E4%BD%9C/</id>
    <published>2021-09-28T03:12:50.000Z</published>
    <updated>2021-10-09T03:30:23.977Z</updated>
    
    <content type="html"><![CDATA[<h1 id="title"><a href="#title" class="headerlink" title="title"></a>title</h1><blockquote><p>details</p></blockquote><span id="more"></span>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;title&quot;&gt;&lt;a href=&quot;#title&quot; class=&quot;headerlink&quot; title=&quot;title&quot;&gt;&lt;/a&gt;title&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;details&lt;/p&gt;
&lt;/blockquote&gt;</summary>
    
    
    
    
  </entry>
  
  <entry>
    <title>pyautogui弹窗操作</title>
    <link href="http://www.zhengtianyu.com/2021/09/28/pyautogui%E5%BC%B9%E7%AA%97%E6%93%8D%E4%BD%9C/"/>
    <id>http://www.zhengtianyu.com/2021/09/28/pyautogui%E5%BC%B9%E7%AA%97%E6%93%8D%E4%BD%9C/</id>
    <published>2021-09-28T03:12:37.000Z</published>
    <updated>2021-10-09T03:30:21.313Z</updated>
    
    <content type="html"><![CDATA[<h1 id="title"><a href="#title" class="headerlink" title="title"></a>title</h1><blockquote><p>details</p></blockquote><span id="more"></span>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;title&quot;&gt;&lt;a href=&quot;#title&quot; class=&quot;headerlink&quot; title=&quot;title&quot;&gt;&lt;/a&gt;title&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;details&lt;/p&gt;
&lt;/blockquote&gt;</summary>
    
    
    
    
  </entry>
  
  <entry>
    <title>pyautogui键盘操作</title>
    <link href="http://www.zhengtianyu.com/2021/09/28/pyautogui%E9%94%AE%E7%9B%98%E6%93%8D%E4%BD%9C/"/>
    <id>http://www.zhengtianyu.com/2021/09/28/pyautogui%E9%94%AE%E7%9B%98%E6%93%8D%E4%BD%9C/</id>
    <published>2021-09-28T03:12:09.000Z</published>
    <updated>2021-10-09T03:30:27.083Z</updated>
    
    <content type="html"><![CDATA[<h1 id="title"><a href="#title" class="headerlink" title="title"></a>title</h1><blockquote><p>details</p></blockquote><span id="more"></span>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;title&quot;&gt;&lt;a href=&quot;#title&quot; class=&quot;headerlink&quot; title=&quot;title&quot;&gt;&lt;/a&gt;title&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;details&lt;/p&gt;
&lt;/blockquote&gt;</summary>
    
    
    
    
  </entry>
  
  <entry>
    <title>pyautogui学习</title>
    <link href="http://www.zhengtianyu.com/2021/09/27/pyautogui%E5%AD%A6%E4%B9%A0/"/>
    <id>http://www.zhengtianyu.com/2021/09/27/pyautogui%E5%AD%A6%E4%B9%A0/</id>
    <published>2021-09-27T03:07:06.000Z</published>
    <updated>2021-09-28T03:11:01.532Z</updated>
    
    <content type="html"><![CDATA[<h1 id="pyautogui学习"><a href="#pyautogui学习" class="headerlink" title="pyautogui学习"></a>pyautogui学习</h1><blockquote><p>PyAutoGUI lets your Python scripts control the mouse and keyboard to automate interactions with other applications. The API is designed to be simple. PyAutoGUI works on Windows, macOS, and Linux, and runs on Python 2 and 3.</p></blockquote><span id="more"></span><p><strong>整理于：<a href="https://pyautogui.readthedocs.io/en/latest/index.html">https://pyautogui.readthedocs.io/en/latest/index.html</a></strong></p><h1 id="基础"><a href="#基础" class="headerlink" title="基础"></a>基础</h1><h2 id="pyautogui能做什么"><a href="#pyautogui能做什么" class="headerlink" title="pyautogui能做什么"></a>pyautogui能做什么</h2><ul><li>在窗口应用中移动鼠标，点击鼠标</li><li>在窗口应用中发送键盘指令</li><li>截图，通过图片寻找在截图中匹配的坐标（简单的图像匹配）</li><li>定位一个应用窗口，移动，缩放，最大化，最小化，关闭（只支持win）</li><li>显示警告和信息窗口</li></ul><h2 id="入门案例"><a href="#入门案例" class="headerlink" title="入门案例"></a>入门案例</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">import pyautogui</span><br><span class="line"></span><br><span class="line">&gt;&gt;&gt; screenWidth, screenHeight = pyautogui.size() # Get the size of the primary monitor.</span><br><span class="line">&gt;&gt;&gt; screenWidth, screenHeight</span><br><span class="line">(2560, 1440)</span><br><span class="line"></span><br><span class="line">&gt;&gt;&gt; currentMouseX, currentMouseY = pyautogui.position() # Get the XY position of the mouse.</span><br><span class="line">&gt;&gt;&gt; currentMouseX, currentMouseY</span><br><span class="line">(1314, 345)</span><br><span class="line"></span><br><span class="line">&gt;&gt;&gt; pyautogui.moveTo(100, 150) # Move the mouse to XY coordinates.</span><br><span class="line"></span><br><span class="line">&gt;&gt;&gt; pyautogui.click()          # Click the mouse.</span><br><span class="line">&gt;&gt;&gt; pyautogui.click(100, 200)  # Move the mouse to XY coordinates and click it.</span><br><span class="line">&gt;&gt;&gt; pyautogui.click(&#x27;button.png&#x27;) # Find where button.png appears on the screen and click it.</span><br><span class="line"></span><br><span class="line">&gt;&gt;&gt; pyautogui.move(400, 0)      # Move the mouse 400 pixels to the right of its current position.</span><br><span class="line">&gt;&gt;&gt; pyautogui.doubleClick()     # Double click the mouse.</span><br><span class="line">&gt;&gt;&gt; pyautogui.moveTo(500, 500, duration=2, tween=pyautogui.easeInOutQuad)  # Use tweening/easing function to move mouse over 2 seconds.</span><br><span class="line"></span><br><span class="line">&gt;&gt;&gt; pyautogui.write(&#x27;Hello world!&#x27;, interval=0.25)  # type with quarter-second pause in between each key</span><br><span class="line">&gt;&gt;&gt; pyautogui.press(&#x27;esc&#x27;)     # Press the Esc key. All key names are in pyautogui.KEY_NAMES</span><br><span class="line"></span><br><span class="line">&gt;&gt;&gt; with pyautogui.hold(&#x27;shift&#x27;):  # Press the Shift key down and hold it.</span><br><span class="line">        pyautogui.press([&#x27;left&#x27;, &#x27;left&#x27;, &#x27;left&#x27;, &#x27;left&#x27;])  # Press the left arrow key 4 times.</span><br><span class="line">&gt;&gt;&gt; # Shift key is released automatically.</span><br><span class="line"></span><br><span class="line">&gt;&gt;&gt; pyautogui.hotkey(&#x27;ctrl&#x27;, &#x27;c&#x27;) # Press the Ctrl-C hotkey combination.</span><br><span class="line"></span><br><span class="line">&gt;&gt;&gt; pyautogui.alert(&#x27;This is the message to display.&#x27;) # Make an alert box appear and pause the program until OK is clicked.</span><br></pre></td></tr></table></figure><h2 id="安全控制"><a href="#安全控制" class="headerlink" title="安全控制"></a>安全控制</h2><p>由于pyautogui是会操控鼠标和键盘，所以一旦你的程序出现了失控场景，你很难通过鼠标关闭程序。程序会默认<code>pyautogui.FAILSAFE = True</code>来抛出一个<code>pyautogui.FailSafeException</code>异常终止程序运行。由于每次执行<code>pyautogui</code>函数后都会有一个gap时间，你可以利用这个gap触发异常终止程序运行。当然，你也可以关闭FAILSAFE但是我墙裂建议不要这么做。</p><h1 id="基本用法表"><a href="#基本用法表" class="headerlink" title="基本用法表"></a>基本用法表</h1><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install pyautogui</span><br></pre></td></tr></table></figure><h2 id="导入"><a href="#导入" class="headerlink" title="导入"></a>导入</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">import pyautogui as pag</span><br></pre></td></tr></table></figure><h2 id="安全控制-1"><a href="#安全控制-1" class="headerlink" title="安全控制"></a>安全控制</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"># 语句执行时间间隔</span><br><span class="line">&gt;&gt;&gt; import pyautogui</span><br><span class="line">&gt;&gt;&gt; pyautogui.PAUSE = 2.5</span><br><span class="line"></span><br><span class="line"># 安全开启参数</span><br><span class="line">&gt;&gt;&gt; import pyautogui</span><br><span class="line">&gt;&gt;&gt; pyautogui.FAILSAFE = True</span><br></pre></td></tr></table></figure><h2 id="鼠标功能"><a href="#鼠标功能" class="headerlink" title="鼠标功能"></a>鼠标功能</h2><p>x，y坐标从屏幕左上角开始算（0，0），x增加表现为右移，y增加表现为下移。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; pyautogui.moveTo(x, y, duration=num_seconds)  # move mouse to XY coordinates over num_second seconds</span><br><span class="line">&gt;&gt;&gt; pyautogui.moveRel(xOffset, yOffset, duration=num_seconds)  # move mouse relative to its current position</span><br></pre></td></tr></table></figure><p>If <code>duration</code> is 0 or unspecified, movement is immediate. Note: dragging on Mac can’t be immediate.<br>如果<code>duration</code>参数为0或者未给出，移动是瞬间完成。但是mac上拖动操作不能瞬间完成</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; pyautogui.dragTo(x, y, duration=num_seconds)  # drag mouse to XY</span><br><span class="line">&gt;&gt;&gt; pyautogui.dragRel(xOffset, yOffset, duration=num_seconds)  # drag mouse relative to its current position</span><br></pre></td></tr></table></figure><p>Calling click() just clicks the mouse once with the left button at the mouse’s current location, but the keyword arguments can change that:<br>调用<code>click()</code>函数作用是在当前位置点击一次鼠标左键，但是<code>keyword</code>参数可以更改这个行为</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; pyautogui.click(x=moveToX, y=moveToY, clicks=num_of_clicks, interval=secs_between_clicks, button=&#x27;left&#x27;)</span><br></pre></td></tr></table></figure><p>The button keyword argument can be ‘left’, ‘middle’, or ‘right’.<br><code>button</code>参数可选值有<code>left</code>,<code>middle</code>,<code>right</code></p><p>All clicks can be done with click(), but these functions exist for readability. Keyword args are optional:<br>全部点击操作都可以用<code>click()</code>实现，但是这些函数存在并且更加已读。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; pyautogui.rightClick(x=moveToX, y=moveToY)</span><br><span class="line">&gt;&gt;&gt; pyautogui.middleClick(x=moveToX, y=moveToY)</span><br><span class="line">&gt;&gt;&gt; pyautogui.doubleClick(x=moveToX, y=moveToY)</span><br><span class="line">&gt;&gt;&gt; pyautogui.tripleClick(x=moveToX, y=moveToY)</span><br></pre></td></tr></table></figure><p>Positive scrolling will scroll up, negative scrolling will scroll down:<br>正向滚动向上，反向滚动向下</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; pyautogui.scroll(amount_to_scroll, x=moveToX, y=moveToY)</span><br></pre></td></tr></table></figure><p>Individual button down and up events can be called separately:<br>鼠标按下和抬起事件可以单独调用</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; pyautogui.mouseDown(x=moveToX, y=moveToY, button=&#x27;left&#x27;)</span><br><span class="line">&gt;&gt;&gt; pyautogui.mouseUp(x=moveToX, y=moveToY, button=&#x27;left&#x27;)</span><br></pre></td></tr></table></figure><h2 id="键盘功能"><a href="#键盘功能" class="headerlink" title="键盘功能"></a>键盘功能</h2><p>Key presses go to wherever the keyboard cursor is at function-calling time.<br>按键时光标在哪，就在哪里执行命令</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; pyautogui.typewrite(&#x27;Hello world!\n&#x27;, interval=secs_between_keys)  # useful for entering text, newline is Enter</span><br></pre></td></tr></table></figure><p>A list of key names can be passed too:<br>按键序列也可以使用</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; pyautogui.typewrite([&#x27;a&#x27;, &#x27;b&#x27;, &#x27;c&#x27;, &#x27;left&#x27;, &#x27;backspace&#x27;, &#x27;enter&#x27;, &#x27;f1&#x27;], interval=secs_between_keys)</span><br></pre></td></tr></table></figure><p>The full list of key names is in pyautogui.KEYBOARD_KEYS<br>全部是按键名称列表在<code>pyautogui.KEYBOARD_KEYS</code></p><p>Keyboard hotkeys like Ctrl-S or Ctrl-Shift-1 can be done by passing a list of key names to hotkey():<br>键盘热键例如<code>Ctrl-S</code> or <code>Ctrl-Shift-1</code>可以通过传入一系列按键名称，通过<code>hotkey()</code>函数实现</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; pyautogui.hotkey(&#x27;ctrl&#x27;, &#x27;c&#x27;)  # ctrl-c to copy</span><br><span class="line">&gt;&gt;&gt; pyautogui.hotkey(&#x27;ctrl&#x27;, &#x27;v&#x27;)  # ctrl-v to paste</span><br></pre></td></tr></table></figure><p>Individual button down and up events can be called separately:<br>键盘按下和抬起事件可以单独调用</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; pyautogui.keyDown(key_name)</span><br><span class="line">&gt;&gt;&gt; pyautogui.keyUp(key_name)</span><br></pre></td></tr></table></figure><h1 id="信息提示弹窗"><a href="#信息提示弹窗" class="headerlink" title="信息提示弹窗"></a>信息提示弹窗</h1><p>If you need to pause the program until the user clicks OK on something, or want to display some information to the user, the message box functions have similar names that JavaScript has:<br>如果你需要暂停程序直到用户点击ok，或者显示给用户一些信息，信息框可以实现</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"># 警告框</span><br><span class="line">&gt;&gt;&gt; pyautogui.alert(&#x27;This displays some text with an OK button.&#x27;)</span><br><span class="line"># 确认取消框</span><br><span class="line">&gt;&gt;&gt; pyautogui.confirm(&#x27;This displays text and has an OK and Cancel button.&#x27;)</span><br><span class="line">&#x27;OK&#x27;</span><br><span class="line"># 带输入框弹窗</span><br><span class="line">&gt;&gt;&gt; pyautogui.prompt(&#x27;This lets the user type in a string and press OK.&#x27;)</span><br><span class="line">&#x27;This is what I typed in.&#x27;</span><br></pre></td></tr></table></figure><p>The prompt() function will return None if the user clicked Cancel.<br>如果点击cancel，<code>prompt()</code>会返回None</p><h1 id="截图操作"><a href="#截图操作" class="headerlink" title="截图操作"></a>截图操作</h1><p>PyAutoGUI uses Pillow/PIL for its image-related data.<br>On Linux, you must run sudo apt-get install scrot to use the screenshot features.</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; pyautogui.screenshot()  # returns a Pillow/PIL Image object</span><br><span class="line">&lt;PIL.Image.Image image mode=RGB size=1920x1080 at 0x24C3EF0&gt;</span><br><span class="line">&gt;&gt;&gt; pyautogui.screenshot(&#x27;foo.png&#x27;)  # returns a Pillow/PIL Image object, and saves it to a file</span><br><span class="line">&lt;PIL.Image.Image image mode=RGB size=1920x1080 at 0x31AA198&gt;</span><br></pre></td></tr></table></figure><p>If you have an image file of something you want to click on, you can find it on the screen with locateOnScreen().<br>如果你有一张图片文件或者其他什么东西想点击的，你可以通过<code>locateOnScreen()</code>函数在屏幕上找到它们。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; pyautogui.locateOnScreen(&#x27;looksLikeThis.png&#x27;)  # returns (left, top, width, height) of first place it is found</span><br><span class="line">(863, 417, 70, 13)</span><br></pre></td></tr></table></figure><p>The locateAllOnScreen() function will return a generator for all the locations it is found on the screen:<br>函数<code>locateAllOnScreen()</code>会返回一个生成器，其中包含了所有坐标</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; for i in pyautogui.locateAllOnScreen(&#x27;looksLikeThis.png&#x27;)</span><br><span class="line">...</span><br><span class="line">...</span><br><span class="line">(863, 117, 70, 13)</span><br><span class="line">(623, 137, 70, 13)</span><br><span class="line">(853, 577, 70, 13)</span><br><span class="line">(883, 617, 70, 13)</span><br><span class="line">(973, 657, 70, 13)</span><br><span class="line">(933, 877, 70, 13)</span><br><span class="line"></span><br><span class="line">&gt;&gt;&gt; list(pyautogui.locateAllOnScreen(&#x27;looksLikeThis.png&#x27;))</span><br><span class="line">[(863, 117, 70, 13), (623, 137, 70, 13), (853, 577, 70, 13), (883, 617, 70, 13), (973, 657, 70, 13), (933, 877, 70, 13)]</span><br></pre></td></tr></table></figure><p>The locateCenterOnScreen() function just returns the XY coordinates of the middle of where the image is found on the screen:<br>函数<code>locateCenterOnScreen()</code> 只返回找到图像的中间坐标</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; pyautogui.locateCenterOnScreen(&#x27;looksLikeThis.png&#x27;)  # returns center x and y</span><br><span class="line">(898, 423)</span><br></pre></td></tr></table></figure><p>These functions return None if the image couldn’t be found on the screen.</p><p>Note: The locate functions are slow and can take a full second or two.<br>注意：这玩意执行很慢</p>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;pyautogui学习&quot;&gt;&lt;a href=&quot;#pyautogui学习&quot; class=&quot;headerlink&quot; title=&quot;pyautogui学习&quot;&gt;&lt;/a&gt;pyautogui学习&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;PyAutoGUI lets your Python scripts control the mouse and keyboard to automate interactions with other applications. The API is designed to be simple. PyAutoGUI works on Windows, macOS, and Linux, and runs on Python 2 and 3.&lt;/p&gt;
&lt;/blockquote&gt;</summary>
    
    
    
    <category term="编程技术" scheme="http://www.zhengtianyu.com/categories/%E7%BC%96%E7%A8%8B%E6%8A%80%E6%9C%AF/"/>
    
    <category term="python" scheme="http://www.zhengtianyu.com/categories/%E7%BC%96%E7%A8%8B%E6%8A%80%E6%9C%AF/python/"/>
    
    
    <category term="界面辅助" scheme="http://www.zhengtianyu.com/tags/%E7%95%8C%E9%9D%A2%E8%BE%85%E5%8A%A9/"/>
    
    <category term="自动化" scheme="http://www.zhengtianyu.com/tags/%E8%87%AA%E5%8A%A8%E5%8C%96/"/>
    
    <category term="pyautogui" scheme="http://www.zhengtianyu.com/tags/pyautogui/"/>
    
  </entry>
  
  <entry>
    <title>阴阳师御魂整理</title>
    <link href="http://www.zhengtianyu.com/2021/08/22/%E9%98%B4%E9%98%B3%E5%B8%88%E5%BE%A1%E9%AD%82%E6%95%B4%E7%90%86/"/>
    <id>http://www.zhengtianyu.com/2021/08/22/%E9%98%B4%E9%98%B3%E5%B8%88%E5%BE%A1%E9%AD%82%E6%95%B4%E7%90%86/</id>
    <published>2021-08-22T12:49:34.000Z</published>
    <updated>2021-08-23T07:23:32.650Z</updated>
    
    <content type="html"><![CDATA[<h1 id="阴阳师御魂整理"><a href="#阴阳师御魂整理" class="headerlink" title="阴阳师御魂整理"></a>阴阳师御魂整理</h1><blockquote><p>主要记录御魂相关内容</p></blockquote><span id="more"></span><h1 id="御魂时间轮换表"><a href="#御魂时间轮换表" class="headerlink" title="御魂时间轮换表"></a>御魂时间轮换表</h1><p><img src="/2021/08/22/%E9%98%B4%E9%98%B3%E5%B8%88%E5%BE%A1%E9%AD%82%E6%95%B4%E7%90%86/%E5%BE%A1%E9%AD%82%E6%97%B6%E9%97%B4%E8%BD%AE%E6%8D%A2%E8%A1%A8.jpeg" alt="御魂时间轮换表"></p><h1 id="御魂主属性数值参考"><a href="#御魂主属性数值参考" class="headerlink" title="御魂主属性数值参考"></a>御魂主属性数值参考</h1><p><img src="/2021/08/22/%E9%98%B4%E9%98%B3%E5%B8%88%E5%BE%A1%E9%AD%82%E6%95%B4%E7%90%86/%E5%BE%A1%E9%AD%82%E4%B8%BB%E5%B1%9E%E6%80%A7%E6%95%B0%E5%80%BC%E7%BB%9F%E8%AE%A1.jpeg" alt="御魂主属性数值参考"></p><h1 id="御魂副属性数值参考"><a href="#御魂副属性数值参考" class="headerlink" title="御魂副属性数值参考"></a>御魂副属性数值参考</h1><p><img src="/2021/08/22/%E9%98%B4%E9%98%B3%E5%B8%88%E5%BE%A1%E9%AD%82%E6%95%B4%E7%90%86/%E5%BE%A1%E9%AD%82%E5%89%AF%E5%B1%9E%E6%80%A7%E6%95%B0%E5%80%BC%E7%BB%9F%E8%AE%A1.jpeg" alt="御魂副属性数值参考"></p><h1 id="御魂整理方案"><a href="#御魂整理方案" class="headerlink" title="御魂整理方案"></a><a href="https://www.bilibili.com/read/cv12566258">御魂整理方案</a></h1><p><a href="https://www.bilibili.com/read/cv12566258">御魂整理方案</a></p>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;阴阳师御魂整理&quot;&gt;&lt;a href=&quot;#阴阳师御魂整理&quot; class=&quot;headerlink&quot; title=&quot;阴阳师御魂整理&quot;&gt;&lt;/a&gt;阴阳师御魂整理&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;主要记录御魂相关内容&lt;/p&gt;
&lt;/blockquote&gt;</summary>
    
    
    
    <category term="游戏人生" scheme="http://www.zhengtianyu.com/categories/%E6%B8%B8%E6%88%8F%E4%BA%BA%E7%94%9F/"/>
    
    <category term="阴阳师" scheme="http://www.zhengtianyu.com/categories/%E6%B8%B8%E6%88%8F%E4%BA%BA%E7%94%9F/%E9%98%B4%E9%98%B3%E5%B8%88/"/>
    
    
  </entry>
  
  <entry>
    <title>阴阳师必备游戏手册</title>
    <link href="http://www.zhengtianyu.com/2021/08/22/%E9%98%B4%E9%98%B3%E5%B8%88%E5%BF%85%E5%A4%87%E6%B8%B8%E6%88%8F%E6%89%8B%E5%86%8C/"/>
    <id>http://www.zhengtianyu.com/2021/08/22/%E9%98%B4%E9%98%B3%E5%B8%88%E5%BF%85%E5%A4%87%E6%B8%B8%E6%88%8F%E6%89%8B%E5%86%8C/</id>
    <published>2021-08-22T07:09:15.000Z</published>
    <updated>2021-08-22T13:23:57.812Z</updated>
    
    <content type="html"><![CDATA[<h1 id="阴阳师必备游戏手册"><a href="#阴阳师必备游戏手册" class="headerlink" title="阴阳师必备游戏手册"></a>阴阳师必备游戏手册</h1><blockquote><p>主要记录日常，周常，怪物，资源获取等内容</p></blockquote><span id="more"></span><h1 id="悬赏任务怪物分布"><a href="#悬赏任务怪物分布" class="headerlink" title="悬赏任务怪物分布"></a>悬赏任务怪物分布</h1><p><img src="/2021/08/22/%E9%98%B4%E9%98%B3%E5%B8%88%E5%BF%85%E5%A4%87%E6%B8%B8%E6%88%8F%E6%89%8B%E5%86%8C/%E6%82%AC%E8%B5%8F%E4%BB%BB%E5%8A%A1.png" alt="悬赏任务怪物分布"></p><h1 id="日常打卡"><a href="#日常打卡" class="headerlink" title="日常打卡"></a>日常打卡</h1><ol><li>地域鬼王</li><li>免费一抽 （必须签到500天）</li><li>喂猫喂狗</li><li>寮30</li><li>商店黑蛋</li><li>大神登录</li><li>每日任务</li><li>寮碎片祈愿，赠予</li><li>结界卡，蹭卡<br>以上尽量都做</li></ol><hr><p>以下选做<br>10. 式神委派<br>11. 50协战<br>12. 金币大作战<br>13. 石距，年兽</p><h1 id="周常打卡"><a href="#周常打卡" class="headerlink" title="周常打卡"></a>周常打卡</h1><ol><li>图鉴分享</li><li>鬼王分享</li><li>竞速本</li><li>寮功勋</li><li>勋章商店</li><li>友情白蛋</li><li>荣誉商店</li><li>蛇皮商店</li></ol><h1 id="每日活动"><a href="#每日活动" class="headerlink" title="每日活动"></a>每日活动</h1><ol><li>寮突破</li><li>结界突破</li><li>逢魔</li><li>道馆</li><li>狩猎战</li></ol><h1 id="式神升星养成攻略"><a href="#式神升星养成攻略" class="headerlink" title="式神升星养成攻略"></a>式神升星养成攻略</h1><h2 id="准备狗粮方式"><a href="#准备狗粮方式" class="headerlink" title="准备狗粮方式"></a>准备狗粮方式</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">2-&gt;3</span><br><span class="line">全部的N卡2星升满级，吃红蛋变3星。</span><br><span class="line">3-&gt;4</span><br><span class="line">3星白蛋吃三星n卡到4星。</span><br><span class="line">4-&gt;5</span><br><span class="line">4星满级白蛋吃刚到4星白蛋升至5星白蛋。</span><br><span class="line">5-&gt;6</span><br><span class="line">5个5星白蛋给五星式神到6</span><br></pre></td></tr></table></figure><h2 id="二星到三星养成"><a href="#二星到三星养成" class="headerlink" title="二星到三星养成"></a>二星到三星养成</h2><p>式神到20级，吃2个2星N卡红蛋。 2w金</p><h2 id="三星升级四星"><a href="#三星升级四星" class="headerlink" title="三星升级四星"></a>三星升级四星</h2><p>式神25级， 吃3个3星N卡红蛋，3w金</p><h2 id="四星升级五星"><a href="#四星升级五星" class="headerlink" title="四星升级五星"></a>四星升级五星</h2><p>式神30级， 吃4个4星白蛋，4w金</p><h2 id="五星升级六星"><a href="#五星升级六星" class="headerlink" title="五星升级六星"></a>五星升级六星</h2><p>式神35级，吃5个5星白蛋，5w金</p><hr><p><strong>总计：</strong><br>一个式神从2星升级到6星<br>狗粮需要：5个5星白蛋+20个4星白蛋+60个3星N卡+120个红蛋or2星n卡<br>5星式神需要：4个4星白蛋+12个3星N卡+24个红蛋or2星n卡<br>共需要：29个高星白蛋+216个N卡</p><p>如果白蛋都是从2级升上来，这个不再额外计算。</p><h1 id="附录"><a href="#附录" class="headerlink" title="附录"></a>附录</h1><h2 id="经验获取表"><a href="#经验获取表" class="headerlink" title="经验获取表"></a>经验获取表</h2><p><img src="/2021/08/22/%E9%98%B4%E9%98%B3%E5%B8%88%E5%BF%85%E5%A4%87%E6%B8%B8%E6%88%8F%E6%89%8B%E5%86%8C/%E7%BB%8F%E9%AA%8C%E8%8E%B7%E5%8F%96.jpeg" alt="经验获取表"></p><h2 id="经验需求表"><a href="#经验需求表" class="headerlink" title="经验需求表"></a>经验需求表</h2><p><img src="/2021/08/22/%E9%98%B4%E9%98%B3%E5%B8%88%E5%BF%85%E5%A4%87%E6%B8%B8%E6%88%8F%E6%89%8B%E5%86%8C/%E7%BB%8F%E9%AA%8C%E9%9C%80%E6%B1%82.jpeg" alt="经验需求表"></p>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;阴阳师必备游戏手册&quot;&gt;&lt;a href=&quot;#阴阳师必备游戏手册&quot; class=&quot;headerlink&quot; title=&quot;阴阳师必备游戏手册&quot;&gt;&lt;/a&gt;阴阳师必备游戏手册&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;主要记录日常，周常，怪物，资源获取等内容&lt;/p&gt;
&lt;/blockquote&gt;</summary>
    
    
    
    <category term="游戏人生" scheme="http://www.zhengtianyu.com/categories/%E6%B8%B8%E6%88%8F%E4%BA%BA%E7%94%9F/"/>
    
    <category term="阴阳师" scheme="http://www.zhengtianyu.com/categories/%E6%B8%B8%E6%88%8F%E4%BA%BA%E7%94%9F/%E9%98%B4%E9%98%B3%E5%B8%88/"/>
    
    
  </entry>
  
  <entry>
    <title>深度学习框架入门</title>
    <link href="http://www.zhengtianyu.com/2021/08/20/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E6%A1%86%E6%9E%B6%E5%85%A5%E9%97%A8/"/>
    <id>http://www.zhengtianyu.com/2021/08/20/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E6%A1%86%E6%9E%B6%E5%85%A5%E9%97%A8/</id>
    <published>2021-08-20T10:38:59.000Z</published>
    <updated>2021-08-27T08:39:40.738Z</updated>
    
    <content type="html"><![CDATA[<h1 id="深度学习框架入门"><a href="#深度学习框架入门" class="headerlink" title="深度学习框架入门"></a>深度学习框架入门</h1><blockquote><p>本篇文章介绍深度学习框架基础知识，并手动实现基础逻辑。</p></blockquote><span id="more"></span><h1 id="深度学习框架是什么"><a href="#深度学习框架是什么" class="headerlink" title="深度学习框架是什么"></a>深度学习框架是什么</h1><p>深度学习框架就是一套用于深度学习的函数。在深度学习中，有这样几种基本操作：卷积，池化，全连接，二分类多分类，反向传播等。好处是你不必重复造轮子，模型也就是积木，是给你的，你可以直接组装。</p><p>用深度学习框架构建模型大概可以分成以下几部分：<br><img src="/2021/08/20/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E6%A1%86%E6%9E%B6%E5%85%A5%E9%97%A8/%E6%A8%A1%E5%9E%8B%E7%BB%93%E6%9E%84.png" alt="模型结构"></p><p>当然，你用深度学习框架，实现这几部分的功能后，就可以正常的去跑一个模型训练，就实现了模型训练的基本功能。但是框架能够实现的远远不止这些，比如额外的有，分布式相关的管理控制，内存显存优化，模型存储，丰富的打印函数，调试工具，部署工具和部署库。但是这些都是基于深度学习衍生出来的工程向的内容，那么对于深度学习本身来说，最重要的功能，一是丰富的算子库，二是自动求导。这可以极大的减少我们的工作量。</p><h1 id="深度学习运行机制"><a href="#深度学习运行机制" class="headerlink" title="深度学习运行机制"></a>深度学习运行机制</h1><p>深度学习框架看着很庞大，其实实现核心内容，是一个非常直观且容易的事情。我们知道，深度学习梯度计算就是使用了链式法则，这个反向计算是深度学习框架的一大重要组成部分。对于一个模型来说，前向和反向的迭代计算占据了一个模型90%的工作量。我们只需要按照上一小节，实现相关模块，便可以手动写一个深度学习训练出来。</p><p>实际上除了要实现的计算层之外，深度学习本质就是一个前向和反向的过程。对于前向，我们可以使用numpy进行计算得到，事实上numpy几乎可以实现现有90%以上深度学习网络的过程。对于反向，需要我们自己来实现相关代码，即求导过程。对于复杂网络，这个代码实现起来异常复杂，而框架恰恰帮我们解决了这个痛点。</p><h2 id="实现数据输入"><a href="#实现数据输入" class="headerlink" title="实现数据输入"></a>实现数据输入</h2><p>我们从最最最简单开始写起，加入我们有一个训练内容。给数据输入1，让他返回2。去找到符合这个的一个模型。那么输入内容就是<code>array([1, 2])</code>。相应的reader实现:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">def reader(data):</span><br><span class="line">return enumerate(data)</span><br></pre></td></tr></table></figure><h2 id="网络层实现"><a href="#网络层实现" class="headerlink" title="网络层实现"></a>网络层实现</h2><p>我们假设该网络就是简单的线性拟合<code>y = Wx + B</code>，那么对于网络整体结构，可以如下图表示<br><img src="/2021/08/20/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E6%A1%86%E6%9E%B6%E5%85%A5%E9%97%A8/%E7%BD%91%E7%BB%9C%E6%95%B4%E4%BD%93%E7%BB%93%E6%9E%84.png" alt="网络整体结构"><br>设计相关代码</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">class Layer(object):</span><br><span class="line">    def __init__(self):</span><br><span class="line">        self.w = random.randint(-10, 10)</span><br><span class="line">        self.g = None</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">class Mul(Layer):</span><br><span class="line">    def forward(self, x):</span><br><span class="line">        return self.w * x</span><br><span class="line"></span><br><span class="line">    def backward(self, x, grad):</span><br><span class="line">        self.g = grad * x</span><br></pre></td></tr></table></figure><h2 id="损失函数实现"><a href="#损失函数实现" class="headerlink" title="损失函数实现"></a>损失函数实现</h2><p>损失函数如图所示就是一个减法误差的平方，我们将他最小化。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">class Loss(object):</span><br><span class="line"></span><br><span class="line">    def forward(self, out, label):</span><br><span class="line">        self.out = out</span><br><span class="line">        self.label = label</span><br><span class="line">        return (label - out) ** 2</span><br><span class="line"></span><br><span class="line">    def backward(self):</span><br><span class="line">        self.g = 2 * (self.label - self.out) * (-1)</span><br></pre></td></tr></table></figure><h2 id="优化器实现"><a href="#优化器实现" class="headerlink" title="优化器实现"></a>优化器实现</h2><p>优化器使用传统的梯度下降</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">class Opt(object):</span><br><span class="line">    def __init__(self, lr):</span><br><span class="line">        self.lr = lr</span><br><span class="line"></span><br><span class="line">    def minimize(self, layer):</span><br><span class="line">        layer.w = layer.w - layer.g * self.lr</span><br></pre></td></tr></table></figure><h2 id="训练效果"><a href="#训练效果" class="headerlink" title="训练效果"></a>训练效果</h2><p>黄色为收敛cost曲线，蓝色为W值变化曲线<br><img src="/2021/08/20/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E6%A1%86%E6%9E%B6%E5%85%A5%E9%97%A8/%E7%BB%93%E6%9E%9C.png" alt="结果"></p><h2 id="整体代码"><a href="#整体代码" class="headerlink" title="整体代码"></a>整体代码</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br></pre></td><td class="code"><pre><span class="line">import random</span><br><span class="line">import time</span><br><span class="line">import matplotlib.pyplot as plt</span><br><span class="line"># random.seed(33)</span><br><span class="line"></span><br><span class="line">class Layer(object):</span><br><span class="line">    def __init__(self):</span><br><span class="line">        self.w = random.randint(-10, 10)</span><br><span class="line">        self.g = None</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">class Mul(Layer):</span><br><span class="line">    def forward(self, x):</span><br><span class="line">        return self.w * x</span><br><span class="line"></span><br><span class="line">    def backward(self, x, grad):</span><br><span class="line">        self.g = grad * x</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">class Loss(object):</span><br><span class="line"></span><br><span class="line">    def forward(self, out, label):</span><br><span class="line">        self.out = out</span><br><span class="line">        self.label = label</span><br><span class="line">        return (label - out) ** 2</span><br><span class="line"></span><br><span class="line">    def backward(self):</span><br><span class="line">        self.g = 2 * (self.label - self.out) * (-1)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">class Opt(object):</span><br><span class="line">    def __init__(self, lr):</span><br><span class="line">        self.lr = lr</span><br><span class="line"></span><br><span class="line">    def minimize(self, layer):</span><br><span class="line">        layer.w = layer.w - layer.g * self.lr</span><br><span class="line"></span><br><span class="line">def reader(data):</span><br><span class="line">    return enumerate(data)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">def run():</span><br><span class="line">    epoch = 200</span><br><span class="line">    d = [[1, 2], [2, 4]]</span><br><span class="line">    model = Mul()</span><br><span class="line">    loss = Loss()</span><br><span class="line">    opt = Opt(lr=0.01)</span><br><span class="line">    print(&quot;[w] init is &#123;&#125;&quot;.format(model.w))</span><br><span class="line">    # time.sleep(2)</span><br><span class="line">    plt.figure()</span><br><span class="line"></span><br><span class="line">    all = []</span><br><span class="line">    all_w = []</span><br><span class="line">    for i in range(epoch):</span><br><span class="line">        print(&quot;[Epoch] &#123;&#125;&quot;.format(i, ))</span><br><span class="line"></span><br><span class="line">        for bid, data in reader(d):</span><br><span class="line">            label = data[1]</span><br><span class="line">            input = data[0]</span><br><span class="line">            out = model.forward(input)</span><br><span class="line">            cost = loss.forward(out, label)</span><br><span class="line">            print(&quot;[cost] is &#123;&#125;&quot;.format(cost))</span><br><span class="line">            loss.backward()</span><br><span class="line">            model.backward(input, loss.g)</span><br><span class="line">            opt.minimize(model)</span><br><span class="line">            print(&quot;[w value] is &#123;&#125;&quot;.format(model.w))</span><br><span class="line">            print(&quot;=============================&quot;)</span><br><span class="line">        all_w.append(model.w)</span><br><span class="line">            # time.sleep(1)</span><br><span class="line">        all.append(cost)</span><br><span class="line">        print(i)</span><br><span class="line">        plt.plot(all)</span><br><span class="line">        plt.plot(all_w)</span><br><span class="line">    plt.show()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">run()</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;深度学习框架入门&quot;&gt;&lt;a href=&quot;#深度学习框架入门&quot; class=&quot;headerlink&quot; title=&quot;深度学习框架入门&quot;&gt;&lt;/a&gt;深度学习框架入门&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;本篇文章介绍深度学习框架基础知识，并手动实现基础逻辑。&lt;/p&gt;
&lt;/blockquote&gt;</summary>
    
    
    
    <category term="深度学习" scheme="http://www.zhengtianyu.com/categories/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/"/>
    
    <category term="框架入门" scheme="http://www.zhengtianyu.com/categories/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/%E6%A1%86%E6%9E%B6%E5%85%A5%E9%97%A8/"/>
    
    
  </entry>
  
  <entry>
    <title>md 基本操作</title>
    <link href="http://www.zhengtianyu.com/2021/08/18/md-%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C/"/>
    <id>http://www.zhengtianyu.com/2021/08/18/md-%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C/</id>
    <published>2021-08-18T09:39:51.000Z</published>
    <updated>2021-08-18T11:56:25.155Z</updated>
    
    <content type="html"><![CDATA[<h1 id="MD基本操作"><a href="#MD基本操作" class="headerlink" title="MD基本操作"></a>MD基本操作</h1><blockquote><p>这篇文章用来测试模板展示效果，以及查找对应的格式写法</p></blockquote><span id="more"></span><h1 id="标题"><a href="#标题" class="headerlink" title="标题"></a>标题</h1><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"># 一级标题</span><br><span class="line">## 二级标题</span><br><span class="line">### 三级标题</span><br><span class="line">#### 四级标题</span><br><span class="line">##### 五级标题</span><br><span class="line">###### 六级标题</span><br></pre></td></tr></table></figure><h1 id="一级标题"><a href="#一级标题" class="headerlink" title="一级标题"></a>一级标题</h1><h2 id="二级标题"><a href="#二级标题" class="headerlink" title="二级标题"></a>二级标题</h2><h3 id="三级标题"><a href="#三级标题" class="headerlink" title="三级标题"></a>三级标题</h3><h4 id="四级标题"><a href="#四级标题" class="headerlink" title="四级标题"></a>四级标题</h4><h5 id="五级标题"><a href="#五级标题" class="headerlink" title="五级标题"></a>五级标题</h5><h6 id="六级标题"><a href="#六级标题" class="headerlink" title="六级标题"></a>六级标题</h6><h1 id="列表"><a href="#列表" class="headerlink" title="列表"></a>列表</h1><h2 id="无序列表"><a href="#无序列表" class="headerlink" title="无序列表"></a>无序列表</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">//形式一</span><br><span class="line">+ a</span><br><span class="line">+ b</span><br><span class="line">+ c</span><br><span class="line">//形式二</span><br><span class="line">- d</span><br><span class="line">- e</span><br><span class="line">- f</span><br><span class="line">//形式三</span><br><span class="line">* g</span><br><span class="line">* h</span><br><span class="line">* i</span><br></pre></td></tr></table></figure><p>//形式一</p><ul><li>a</li><li>b</li><li>c</li></ul><p>//形式二</p><ul><li>d</li><li>e</li><li>f</li></ul><p>//形式三</p><ul><li>g</li><li>h</li><li>i</li></ul><h2 id="有序列表"><a href="#有序列表" class="headerlink" title="有序列表"></a>有序列表</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">//正常形式</span><br><span class="line">1. abc</span><br><span class="line">2. bcd</span><br><span class="line">3. cde</span><br><span class="line">//错序效果</span><br><span class="line">2. fgh</span><br><span class="line">3. ghi</span><br><span class="line">5. hij</span><br></pre></td></tr></table></figure><p>//正常形式</p><ol><li>abc</li><li>bcd</li><li>cde</li></ol><p>//错序效果</p><ol start="2"><li>fgh</li><li>ghi</li><li>hij</li></ol><h2 id="嵌套列表"><a href="#嵌套列表" class="headerlink" title="嵌套列表"></a>嵌套列表</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">//无序列表嵌套</span><br><span class="line">+ 123</span><br><span class="line">    + abc</span><br><span class="line">    + bcd</span><br><span class="line">    + cde</span><br><span class="line">+ 465</span><br><span class="line">+ 789</span><br><span class="line">//有序列表嵌套</span><br><span class="line">1. abcd</span><br><span class="line">    1. abcde</span><br><span class="line">    2. abcde</span><br><span class="line">    3. abcde</span><br><span class="line">2. bcde</span><br><span class="line">3. cdef</span><br></pre></td></tr></table></figure><p>//无序列表嵌套</p><ul><li>123<ul><li>abc</li><li>bcd</li><li>cde</li></ul></li><li>465</li><li>789</li></ul><p>//有序列表嵌套</p><ol><li>abcd<ol><li>abcde</li><li>abcde</li><li>abcde</li></ol></li><li>bcde</li><li>cdef</li></ol><h1 id="引用区块"><a href="#引用区块" class="headerlink" title="引用区块"></a>引用区块</h1><p>对某个部分做的内容做一些说明或者引用某某的话等，可以用这个语法。</p><h2 id="正常形式"><a href="#正常形式" class="headerlink" title="正常形式"></a>正常形式</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt; 引用内容、说明内容。在语句前面加一个 &gt; ，注意是英文的那个右尖括号，注意空格，引用因为是一个区块，理论上是应该什么内容都可以放，比如说：标题，列表，引用等等。</span><br></pre></td></tr></table></figure><blockquote><p>这是一个引用</p></blockquote><h2 id="嵌套区块"><a href="#嵌套区块" class="headerlink" title="嵌套区块"></a>嵌套区块</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&gt; 一级引用</span><br><span class="line">&gt;&gt; 二级引用</span><br><span class="line">&gt;&gt;&gt; 三级引用</span><br><span class="line">&gt;&gt;&gt;&gt; 四级引用</span><br><span class="line">&gt;&gt;&gt;&gt;&gt; 五级引用</span><br><span class="line">&gt;&gt;&gt;&gt;&gt;&gt; 六级引用</span><br></pre></td></tr></table></figure><blockquote><p>一级引用</p><blockquote><p>二级引用</p><blockquote><p>三级引用</p><blockquote><p>四级引用</p><blockquote><p>五级引用</p><blockquote><p>六级引用</p></blockquote></blockquote></blockquote></blockquote></blockquote></blockquote><h1 id="代码块"><a href="#代码块" class="headerlink" title="代码块"></a>代码块</h1><h2 id="单行代码"><a href="#单行代码" class="headerlink" title="单行代码"></a>单行代码</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">直接用`code`包裹</span><br></pre></td></tr></table></figure><p>查询linux文件目录和隐藏文件命令为<code>ls -al</code></p><h2 id="多行代码"><a href="#多行代码" class="headerlink" title="多行代码"></a>多行代码</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">使用```包裹 </span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">这里面是多行代码</span><br><span class="line">hello world！</span><br></pre></td></tr></table></figure><h1 id="链接"><a href="#链接" class="headerlink" title="链接"></a>链接</h1><h2 id="行内式"><a href="#行内式" class="headerlink" title="行内式"></a>行内式</h2><p>链接的文字放在[]中，链接地址放在随后的()中，链接也可以带title属性，链接地址后面空一格，然后用引号引起来</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[百度](https://www.baidu.com &quot;百度主页&quot;)</span><br></pre></td></tr></table></figure><p><a href="https://www.baidu.com/" title="百度主页">百度</a>：点击试试</p><h1 id="图片"><a href="#图片" class="headerlink" title="图片"></a>图片</h1><p>图片直接放在生成文件的同名文件夹下，直接引入即可。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">![这是代替图片的文字，随便写](xxxx.jpeg)</span><br><span class="line">&lt;img src=mingrixiang.jpeg width=30%  /&gt;</span><br></pre></td></tr></table></figure><p><img src="/2021/08/18/md-%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C/mingrixiang.jpeg" alt="这是代替图片的文字，随便写"><br><img src="/2021/08/18/md-%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C/mingrixiang.jpeg" width="30%"></p><h1 id="分割线"><a href="#分割线" class="headerlink" title="分割线"></a>分割线</h1><p>分割线可以由* - _（星号，减号，底线）这3个符号的至少3个符号表示，注意至少要3个，且不需要连续，有空格也可以</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">---</span><br><span class="line">- - -</span><br><span class="line">------</span><br><span class="line">***</span><br><span class="line">* * *</span><br><span class="line">******</span><br><span class="line">___</span><br><span class="line">_ _ _</span><br><span class="line">______</span><br></pre></td></tr></table></figure><p>效果都一样</p><hr><h1 id="强调字体"><a href="#强调字体" class="headerlink" title="强调字体"></a>强调字体</h1><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">*DDDivano*  倾斜</span><br><span class="line">**DDDivano**   加粗</span><br><span class="line">_DDDivano_   倾斜</span><br><span class="line">__DDDivano__    加粗</span><br><span class="line">***DDDivano***    倾斜加粗</span><br><span class="line">~~DDDivano~~  删除</span><br></pre></td></tr></table></figure><p><em>DDDivano</em>  倾斜<br><strong>DDDivano</strong>   加粗<br><em>DDDivano</em>   倾斜<br><strong>DDDivano</strong>    加粗<br><em><strong>DDDivano</strong></em>    倾斜加粗<br><del>DDDivano</del>  删除</p><h1 id="表格"><a href="#表格" class="headerlink" title="表格"></a>表格</h1><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">//例子一</span><br><span class="line">|123|234|345|</span><br><span class="line">|:-|:-:|-:|</span><br><span class="line">|abc|bcd|cde|</span><br><span class="line">|abc|bcd|cde|</span><br><span class="line">|abc|bcd|cde|</span><br><span class="line">//例子二</span><br><span class="line">|123|234|345|</span><br><span class="line">|:---|:---:|---:|</span><br><span class="line">|abc|bcd|cde|</span><br><span class="line">|abc|bcd|cde|</span><br><span class="line">|abc|bcd|cde|</span><br><span class="line">//例子三</span><br><span class="line">123|234|345</span><br><span class="line">:-|:-:|-:</span><br><span class="line">abc|bcd|cde</span><br><span class="line">abc|bcd|cde</span><br><span class="line">abc|bcd|cde</span><br></pre></td></tr></table></figure><p>//例子一</p><table><thead><tr><th align="left">123</th><th align="center">234</th><th align="right">345</th></tr></thead><tbody><tr><td align="left">abc</td><td align="center">bcd</td><td align="right">cde</td></tr><tr><td align="left">abc</td><td align="center">bcd</td><td align="right">cde</td></tr><tr><td align="left">abc</td><td align="center">bcd</td><td align="right">cde</td></tr></tbody></table><p>//例子二</p><table><thead><tr><th align="left">123</th><th align="center">234</th><th align="right">345</th></tr></thead><tbody><tr><td align="left">abc</td><td align="center">bcd</td><td align="right">cde</td></tr><tr><td align="left">abc</td><td align="center">bcd</td><td align="right">cde</td></tr><tr><td align="left">abc</td><td align="center">bcd</td><td align="right">cde</td></tr></tbody></table><p>//例子三</p><table><thead><tr><th align="left">123</th><th align="center">234</th><th align="right">345</th></tr></thead><tbody><tr><td align="left">abc</td><td align="center">bcd</td><td align="right">cde</td></tr><tr><td align="left">abc</td><td align="center">bcd</td><td align="right">cde</td></tr><tr><td align="left">abc</td><td align="center">bcd</td><td align="right">cde</td></tr></tbody></table>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;MD基本操作&quot;&gt;&lt;a href=&quot;#MD基本操作&quot; class=&quot;headerlink&quot; title=&quot;MD基本操作&quot;&gt;&lt;/a&gt;MD基本操作&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;这篇文章用来测试模板展示效果，以及查找对应的格式写法&lt;/p&gt;
&lt;/blockquote&gt;</summary>
    
    
    
    <category term="编程技术" scheme="http://www.zhengtianyu.com/categories/%E7%BC%96%E7%A8%8B%E6%8A%80%E6%9C%AF/"/>
    
    <category term="md" scheme="http://www.zhengtianyu.com/categories/%E7%BC%96%E7%A8%8B%E6%8A%80%E6%9C%AF/md/"/>
    
    
  </entry>
  
  <entry>
    <title>git 基本操作</title>
    <link href="http://www.zhengtianyu.com/2021/08/18/git-%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C/"/>
    <id>http://www.zhengtianyu.com/2021/08/18/git-%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C/</id>
    <published>2021-08-18T09:16:52.000Z</published>
    <updated>2021-08-20T09:41:18.222Z</updated>
    
    <content type="html"><![CDATA[<h1 id="git-基本操作"><a href="#git-基本操作" class="headerlink" title="git 基本操作"></a>git 基本操作</h1><blockquote><p>用来记录Git常用命令</p></blockquote><span id="more"></span><h1 id="git-提交代码三板斧"><a href="#git-提交代码三板斧" class="headerlink" title="git 提交代码三板斧"></a>git 提交代码三板斧</h1><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git add</span><br><span class="line">git commit -m &quot;your comment&quot;</span><br><span class="line">git push origin master</span><br></pre></td></tr></table></figure><p>这三条命令即可完成90%的日常工作。</p><h1 id="git-clone代码"><a href="#git-clone代码" class="headerlink" title="git clone代码"></a>git clone代码</h1><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git clone https://github.com/WeakAuras/WeakAuras2.git      # 克隆wa代码仓库</span><br><span class="line">git clone -b bc https://github.com/WeakAuras/WeakAuras2.git   # 克隆wa代码仓库bc分支  -b (分支名，指定分支，不指定就是默认分支)</span><br><span class="line">git clone https://github.com/WeakAuras/WeakAuras2.git  aaa  # 克隆wa代码仓库并命名为aaa</span><br></pre></td></tr></table></figure><h1 id="git-分支管理"><a href="#git-分支管理" class="headerlink" title="git 分支管理"></a>git 分支管理</h1><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">git branch    # 查看分支</span><br><span class="line">git branch xxx # 创建分支</span><br><span class="line">git branch -a  # 查看全部分支 包括远程仓库</span><br><span class="line">git branch -D  xxx # 删除 xxx分支</span><br><span class="line">git checkout -b xxx # 创建并checkout 过去</span><br><span class="line">git checkout xxx # 切换到xxx分支</span><br></pre></td></tr></table></figure><p><code>git branch</code> 创建一个分支后，该分支起始点即是创建当前所在分支点。创建分支切换，不会更改本地未在git仓库的文件，即未进行git add的文件，所以不用担心会影响本地修改。但是如果checkout的分支与本地目前文件存在冲突，需要手动处理。<br>例如：分支a下，新建文件a，checkout 分支b， 分支b本身存在文件a，那就会报冲突。<br><code>git merge xxx</code> 用来把xxx分支合并到当前分支。 比如把b分支合并到a分支，需要切换到a分支<code>git checkout a</code>，使用<code>git merge b</code>进行合并。如果有冲突需要手动解决冲突。</p><h1 id="git-标签管理"><a href="#git-标签管理" class="headerlink" title="git 标签管理"></a>git 标签管理</h1><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">git tag xxx # 打标签名字为xxx</span><br><span class="line">git tag -d xxx #删除xxx标签</span><br><span class="line">git push并不会把tag标签传送到远端服务器上，只有通过显式命令才能分享标签到远端仓库。</span><br><span class="line">git push origin v1.0 # 将本地v1.0的tag推送到远端服务器</span><br><span class="line">git push [origin] --tags # push 全部tag</span><br></pre></td></tr></table></figure><blockquote><p><code>git tag</code>和<code>git branch</code>区别是，分支是可以进行后续开发，标识一个提交代码全过程的commit，<code>git tag</code>只能标识一个特定的commit，可以理解成commit的友好名字（别名）。</p></blockquote><h1 id="git-push提交远程仓库"><a href="#git-push提交远程仓库" class="headerlink" title="git push提交远程仓库"></a>git push提交远程仓库</h1><p>如果你的git代码仓库是从github拉取下来的，默认远程仓库的名字叫origin</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">git push origin xxx  # 将xxx分支推送到远程xxx分支</span><br><span class="line">git push origin xxx:xxx  # 将xxx分支推送到远程xxx分支</span><br><span class="line">同理也可以如下操作</span><br><span class="line">git push origin xxx:aaa #将xxx分支推送到远程aaa分支，如果能automerge就merge，不能就手动解决。</span><br><span class="line">git push origin :aaa # 将空分支推送到远程aaa分支，意思就是把远程aaa分支删了。</span><br></pre></td></tr></table></figure><h1 id="git-开源仓库贡献代码"><a href="#git-开源仓库贡献代码" class="headerlink" title="git 开源仓库贡献代码"></a>git 开源仓库贡献代码</h1><p>这一块相对来说会复杂一些，需要对git有深入的理解。贡献开源代码并不像自己提交远程仓库那样，直接push origin就可以，需要使用pull request的方式，具体原因请自行百度。<br>简要来说，步骤如下：</p><ol><li>fork开源代码仓库</li><li>git clone自己fork的仓库到本地</li><li>本地改完了，提交代码到自己fork的仓库</li><li>在自己fork的仓库网页处发起pull request到开源仓库</li></ol><p>2，3步骤和自己提交远程仓库没有区别。1，4步需要在github的网页用鼠标点击操作，也是没有什么难度。具体难点在于，提交了一个代码后，下一次提交如何基于远程最新的代码进行提交，防止pull request的时候出现冲突。即，同步主仓库最新的代码。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">git remote add upstream git@github.com:PaddlePaddle/Paddle.git  # 把远程仓库加入到本地关联中， 这里upstream可以叫任何名字，等同于origin</span><br><span class="line">git fetch upstream  # 更新远程仓库</span><br><span class="line">git merge upstream/develop # 把远程仓库develop分支 merge到当前分支，保持同步。解决冲突</span><br><span class="line"># 或者有另外一种方法</span><br><span class="line">git checkout upstream/develop </span><br><span class="line">git branch xxxx &amp;&amp; git checkout xxxx       # checkout 最新主库分支，并基于主库分支创建一个本地的分支，后续修改直接在xxxx分支上修改</span><br></pre></td></tr></table></figure><p>以上就是如何提交pr的基本操作</p><h1 id="git-拉取pr"><a href="#git-拉取pr" class="headerlink" title="git 拉取pr"></a>git 拉取pr</h1><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git fetch origin pull/xxxx/head:pr_xxxx  # 拉取origin的xxxx（pr号）到本地的pr_xxxx分支</span><br></pre></td></tr></table></figure><h1 id="git-pull-和-git-fetch-区别"><a href="#git-pull-和-git-fetch-区别" class="headerlink" title="git pull 和 git fetch 区别"></a>git pull 和 git fetch 区别</h1><p>pull=fetch+merge，pull的话，下拉远程分支并与本地分支合并。fetch只是下拉远程分支，怎么合并，可以自己再做选择。</p>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;git-基本操作&quot;&gt;&lt;a href=&quot;#git-基本操作&quot; class=&quot;headerlink&quot; title=&quot;git 基本操作&quot;&gt;&lt;/a&gt;git 基本操作&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;用来记录Git常用命令&lt;/p&gt;
&lt;/blockquote&gt;</summary>
    
    
    
    <category term="编程技术" scheme="http://www.zhengtianyu.com/categories/%E7%BC%96%E7%A8%8B%E6%8A%80%E6%9C%AF/"/>
    
    <category term="git" scheme="http://www.zhengtianyu.com/categories/%E7%BC%96%E7%A8%8B%E6%8A%80%E6%9C%AF/git/"/>
    
    
  </entry>
  
  <entry>
    <title>docker 基本操作</title>
    <link href="http://www.zhengtianyu.com/2021/08/18/docker-%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C/"/>
    <id>http://www.zhengtianyu.com/2021/08/18/docker-%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C/</id>
    <published>2021-08-18T09:13:16.000Z</published>
    <updated>2021-08-18T09:16:27.369Z</updated>
    
    <content type="html"><![CDATA[<p>docker</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;docker&lt;/p&gt;
</summary>
      
    
    
    
    <category term="编程技术" scheme="http://www.zhengtianyu.com/categories/%E7%BC%96%E7%A8%8B%E6%8A%80%E6%9C%AF/"/>
    
    <category term="docker" scheme="http://www.zhengtianyu.com/categories/%E7%BC%96%E7%A8%8B%E6%8A%80%E6%9C%AF/docker/"/>
    
    
    <category term="编程技术" scheme="http://www.zhengtianyu.com/tags/%E7%BC%96%E7%A8%8B%E6%8A%80%E6%9C%AF/"/>
    
    <category term="docker" scheme="http://www.zhengtianyu.com/tags/docker/"/>
    
  </entry>
  
  <entry>
    <title>test images</title>
    <link href="http://www.zhengtianyu.com/2021/08/17/test-images/"/>
    <id>http://www.zhengtianyu.com/2021/08/17/test-images/</id>
    <published>2021-08-17T11:01:44.000Z</published>
    <updated>2021-08-18T08:46:03.801Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/2021/08/17/test-images/avatar.jpeg" alt="这是代替图片的文字，随便写"></p><p>爱仕达大厦<br>爱仕达大厦</p><span id="more"></span><p>爱仕达大厦</p><p>爱仕达大厦</p><p>爱仕达大厦</p><p>爱仕达大厦</p><p>爱仕达大厦</p><p>爱仕达大厦</p><p>爱仕达大厦</p><p>爱仕达大厦</p><p>爱仕达大厦</p><p>爱仕达大厦</p><p>爱仕达大厦</p><p>爱仕达大厦</p><p>爱仕达大厦</p><p>爱仕达大厦</p><p>爱仕达大厦</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;img src=&quot;/2021/08/17/test-images/avatar.jpeg&quot; alt=&quot;这是代替图片的文字，随便写&quot;&gt;&lt;/p&gt;
&lt;p&gt;爱仕达大厦&lt;br&gt;爱仕达大厦&lt;/p&gt;</summary>
    
    
    
    
  </entry>
  
  <entry>
    <title>my first blog</title>
    <link href="http://www.zhengtianyu.com/2021/08/17/my-first-blog/"/>
    <id>http://www.zhengtianyu.com/2021/08/17/my-first-blog/</id>
    <published>2021-08-17T10:22:25.000Z</published>
    <updated>2021-08-17T10:23:24.506Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Hello-World"><a href="#Hello-World" class="headerlink" title="Hello World!"></a>Hello World!</h2><p>这应该是一个美好的开始！</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;Hello-World&quot;&gt;&lt;a href=&quot;#Hello-World&quot; class=&quot;headerlink&quot; title=&quot;Hello World!&quot;&gt;&lt;/a&gt;Hello World!&lt;/h2&gt;&lt;p&gt;这应该是一个美好的开始！&lt;/p&gt;
</summary>
      
    
    
    
    
    <category term="世界" scheme="http://www.zhengtianyu.com/tags/%E4%B8%96%E7%95%8C/"/>
    
  </entry>
  
</feed>
